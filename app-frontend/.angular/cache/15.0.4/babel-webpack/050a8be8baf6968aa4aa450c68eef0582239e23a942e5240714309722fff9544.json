{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./transactionService\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TransactionFormComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \" Invalid UUID format \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionFormComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \" Invalid integer format \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class TransactionFormComponent {\n  constructor(transactionService, router) {\n    this.transactionService = transactionService;\n    this.router = router;\n    this.accountId = 111;\n    this.amount = 0;\n  }\n  submitTransaction() {\n    // Create transactionRequest object\n    const transactionRequest = {\n      accountId: this.accountId,\n      amount: this.amount\n    };\n    console.log('Navigation URL:', ['/transactions', transactionRequest.accountId, transactionRequest.amount]);\n    // Add transaction to SQLite database\n    this.transactionService.addTransaction(transactionRequest).subscribe(() => {\n      //  Redirect to TransactionListComponent after successful submission\n      this.router.navigate(['/transactions', transactionRequest.accountId, transactionRequest.amount]);\n    });\n  }\n}\nTransactionFormComponent.ɵfac = function TransactionFormComponent_Factory(t) {\n  return new (t || TransactionFormComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.Router));\n};\nTransactionFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionFormComponent,\n  selectors: [[\"app-root\"]],\n  decls: 12,\n  vars: 5,\n  consts: [[3, \"ngSubmit\"], [\"transactionForm\", \"ngForm\"], [\"for\", \"accountId\"], [\"type\", \"text\", \"id\", \"accountId\", \"name\", \"accountId\", \"required\", \"\", \"uuidValidator\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"amount\"], [\"type\", \"number\", \"id\", \"amount\", \"name\", \"amount\", \"required\", \"\", \"integerValidator\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"error-message\"]],\n  template: function TransactionFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0, 1);\n      i0.ɵɵlistener(\"ngSubmit\", function TransactionFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitTransaction();\n      });\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Account ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.accountId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, TransactionFormComponent_div_5_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementStart(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.amount = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, TransactionFormComponent_div_9_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementStart(10, \"button\", 7);\n      i0.ɵɵtext(11, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.accountId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r0.controls[\"accountId\"].errors == null ? null : _r0.controls[\"accountId\"].errors.invalidUuid);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.amount);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", _r0.controls[\"amount\"].errors == null ? null : _r0.controls[\"amount\"].errors.invalidInteger);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;IAKEA,8BAA6F;IAC3FA,qCACF;IAAAA,iBAAM;;;;;IAINA,8BAA6F;IAC3FA,wCACF;IAAAA,iBAAM;;;ACJR,OAAM,MAAOC,wBAAwB;EAInCC,YAAoBC,kBAAsC,EAAUC,MAAc;IAA9D,uBAAkB,GAAlBD,kBAAkB;IAA8B,WAAM,GAANC,MAAM;IACxE,IAAI,CAACC,SAAS,GAAE,GAAG;IACnB,IAAI,CAACC,MAAM,GAAG,CAAC;EACjB;EAEAC,iBAAiB;IACf;IACD,MAAMC,kBAAkB,GAAG;MAAEH,SAAS,EAAE,IAAI,CAACA,SAAS;MAAEC,MAAM,EAAE,IAAI,CAACA;IAAM,CAAE;IAC5EG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,CAAC,eAAe,EAAEF,kBAAkB,CAACH,SAAS,EAAEG,kBAAkB,CAACF,MAAM,CAAC,CAAC;IAE1G;IACA,IAAI,CAACH,kBAAkB,CAACQ,cAAc,CAACH,kBAAkB,CAAC,CAACI,SAAS,CAAC,MAAK;MAC1E;MACC,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,eAAe,EAAEL,kBAAkB,CAACH,SAAS,EAAEG,kBAAkB,CAACF,MAAM,CAAC,CAAC;IACjG,CAAC,CAAC;EACJ;;AAnBWL,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDPrClB,kCAAiE;MAA3DA;QAAA,OAAYmB,uBAAmB;MAAA,EAAC;MACpCnB,gCAAuB;MAAAA,2BAAW;MAAAA,iBAAQ;MAC1CA,gCAAkG;MAAtCA;QAAA;MAAA,EAAuB;MAAnFA,iBAAkG;MAClGA,yEAEM;MAENA,gCAAoB;MAAAA,uBAAO;MAAAA,iBAAQ;MACnCA,gCAA8F;MAAtCA;QAAA;MAAA,EAAoB;MAA5EA,iBAA8F;MAC9FA,yEAEM;MAENA,kCAA2D;MAAAA,uBAAM;MAAAA,iBAAS;;;;MAXdA,eAAuB;MAAvBA,uCAAuB;MAC7EA,eAA+D;MAA/DA,qHAA+D;MAKbA,eAAoB;MAApBA,oCAAoB;MACtEA,eAA+D;MAA/DA,kHAA+D;MAI/CA,eAAoC;MAApCA,sCAAoC","names":["i0","TransactionFormComponent","constructor","transactionService","router","accountId","amount","submitTransaction","transactionRequest","console","log","addTransaction","subscribe","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.html","C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.ts"],"sourcesContent":["\r\n\r\n<form (ngSubmit)=\"submitTransaction()\" #transactionForm=\"ngForm\">\r\n  <label for=\"accountId\">Account ID:</label>\r\n  <input type=\"text\" id=\"accountId\" name=\"accountId\" required [(ngModel)]=\"accountId\" uuidValidator>\r\n  <div *ngIf=\"transactionForm.controls['accountId'].errors?.invalidUuid\" class=\"error-message\">\r\n    Invalid UUID format\r\n  </div>\r\n  \r\n  <label for=\"amount\">Amount:</label>\r\n  <input type=\"number\" id=\"amount\" name=\"amount\" required [(ngModel)]=\"amount\" integerValidator>\r\n  <div *ngIf=\"transactionForm.controls['amount'].errors?.invalidInteger\" class=\"error-message\">\r\n    Invalid integer format\r\n  </div>\r\n  \r\n  <button type=\"submit\" [disabled]=\"transactionForm.invalid\">Submit</button>\r\n</form>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TransactionService } from './transactionService'; // Import the transaction service\r\nimport { uuidValidator, integerValidator } from './transactionFormValidator';\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n  templateUrl: './transactionForm.component.html',\r\n})\r\nexport class TransactionFormComponent {\r\n  accountId: number;\r\n  amount: number;\r\n\r\n  constructor(private transactionService: TransactionService, private router: Router) {\r\n    this.accountId =111;\r\n    this.amount = 0;\r\n  }\r\n\r\n  submitTransaction(): void {\r\n    // Create transactionRequest object\r\n   const transactionRequest = { accountId: this.accountId, amount: this.amount };\r\n    console.log('Navigation URL:', ['/transactions', transactionRequest.accountId, transactionRequest.amount]);\r\n  \r\n    // Add transaction to SQLite database\r\n    this.transactionService.addTransaction(transactionRequest).subscribe(() => {\r\n    //  Redirect to TransactionListComponent after successful submission\r\n     this.router.navigate(['/transactions', transactionRequest.accountId, transactionRequest.amount]);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}