{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./transactionService\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TransactionFormComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Account ID is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionFormComponent_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Invalid UUID format\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionFormComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, TransactionFormComponent_div_6_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵtemplate(2, TransactionFormComponent_div_6_div_2_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.errors == null ? null : _r1.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.errors == null ? null : _r1.errors.invalidUuid);\n  }\n}\nfunction TransactionFormComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Amount is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionFormComponent_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Invalid integer format\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransactionFormComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, TransactionFormComponent_div_11_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵtemplate(2, TransactionFormComponent_div_11_div_2_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r3.errors == null ? null : _r3.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r3.errors == null ? null : _r3.errors.invalidInteger);\n  }\n}\nconst _c0 = function () {\n  return {\n    updateOn: \"blur\"\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class TransactionFormComponent {\n  constructor(transactionService, router) {\n    this.transactionService = transactionService;\n    this.router = router;\n    this.accountId = 111;\n    this.amount = 0;\n  }\n  submitTransaction() {\n    // Create transactionRequest object\n    const transactionRequest = {\n      accountId: this.accountId,\n      amount: this.amount\n    };\n    console.log('Navigation URL:', ['/transactions', transactionRequest.accountId, transactionRequest.amount]);\n    // Add transaction to SQLite database\n    this.transactionService.addTransaction(transactionRequest).subscribe(() => {\n      //  Redirect to TransactionListComponent after successful submission\n      this.router.navigate(['/transactions', transactionRequest.accountId, transactionRequest.amount]);\n    });\n  }\n}\nTransactionFormComponent.ɵfac = function TransactionFormComponent_Factory(t) {\n  return new (t || TransactionFormComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.Router));\n};\nTransactionFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionFormComponent,\n  selectors: [[\"app-root\"]],\n  decls: 14,\n  vars: 15,\n  consts: [[3, \"ngSubmit\"], [\"transactionForm\", \"ngForm\"], [\"for\", \"accountId\"], [\"type\", \"text\", \"id\", \"accountId\", \"name\", \"accountId\", \"required\", \"\", \"uuidValidator\", \"\", 3, \"ngModel\", \"ngModelOptions\", \"ngClass\", \"ngModelChange\"], [\"accountIdInput\", \"ngModel\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"amount\"], [\"type\", \"number\", \"id\", \"amount\", \"name\", \"amount\", \"required\", \"\", \"integerValidator\", \"\", 3, \"ngModel\", \"ngModelOptions\", \"ngClass\", \"ngModelChange\"], [\"amountInput\", \"ngModel\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"invalid-feedback\"], [4, \"ngIf\"]],\n  template: function TransactionFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0, 1);\n      i0.ɵɵlistener(\"ngSubmit\", function TransactionFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitTransaction();\n      });\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Account ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.accountId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, TransactionFormComponent_div_6_Template, 3, 2, \"div\", 5);\n      i0.ɵɵelementStart(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 7, 8);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.amount = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, TransactionFormComponent_div_11_Template, 3, 2, \"div\", 5);\n      i0.ɵɵelementStart(12, \"button\", 9);\n      i0.ɵɵtext(13, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      const _r1 = i0.ɵɵreference(5);\n      const _r3 = i0.ɵɵreference(10);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.accountId)(\"ngModelOptions\", i0.ɵɵpureFunction0(9, _c0))(\"ngClass\", i0.ɵɵpureFunction1(10, _c1, _r1.invalid && (_r1.dirty || _r1.touched)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", _r1.invalid && (_r1.dirty || _r1.touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.amount)(\"ngModelOptions\", i0.ɵɵpureFunction0(12, _c0))(\"ngClass\", i0.ɵɵpureFunction1(13, _c1, _r3.invalid && (_r3.dirty || _r3.touched)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", _r3.invalid && (_r3.dirty || _r3.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;IAOIA,2BAA6C;IAAAA,sCAAsB;IAAAA,iBAAM;;;;;IACzEA,2BAAgD;IAAAA,mCAAmB;IAAAA,iBAAM;;;;;IAF3EA,+BAAiH;IAC/GA,gFAAyE;IACzEA,gFAAyE;IAC3EA,iBAAM;;;;;IAFEA,eAAqC;IAArCA,sEAAqC;IACrCA,eAAwC;IAAxCA,yEAAwC;;;;;IAQ9CA,2BAA0C;IAAAA,kCAAkB;IAAAA,iBAAM;;;;;IAClEA,2BAAgD;IAAAA,sCAAsB;IAAAA,iBAAM;;;;;IAF9EA,+BAAwG;IACtGA,iFAAkE;IAClEA,iFAA4E;IAC9EA,iBAAM;;;;;IAFEA,eAAkC;IAAlCA,sEAAkC;IAClCA,eAAwC;IAAxCA,4EAAwC;;;;;;;;;;;;;ACRlD,OAAM,MAAOC,wBAAwB;EAInCC,YAAoBC,kBAAsC,EAAUC,MAAc;IAA9D,uBAAkB,GAAlBD,kBAAkB;IAA8B,WAAM,GAANC,MAAM;IACxE,IAAI,CAACC,SAAS,GAAE,GAAG;IACnB,IAAI,CAACC,MAAM,GAAG,CAAC;EACjB;EAEAC,iBAAiB;IACf;IACD,MAAMC,kBAAkB,GAAG;MAAEH,SAAS,EAAE,IAAI,CAACA,SAAS;MAAEC,MAAM,EAAE,IAAI,CAACA;IAAM,CAAE;IAC5EG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,CAAC,eAAe,EAAEF,kBAAkB,CAACH,SAAS,EAAEG,kBAAkB,CAACF,MAAM,CAAC,CAAC;IAE1G;IACA,IAAI,CAACH,kBAAkB,CAACQ,cAAc,CAACH,kBAAkB,CAAC,CAACI,SAAS,CAAC,MAAK;MAC1E;MACC,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,eAAe,EAAEL,kBAAkB,CAACH,SAAS,EAAEG,kBAAkB,CAACF,MAAM,CAAC,CAAC;IACjG,CAAC,CAAC;EACJ;;AAnBWL,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRrClB,kCAAiE;MAA3DA;QAAA,OAAYmB,uBAAmB;MAAA,EAAC;MACpCnB,gCAAuB;MAAAA,2BAAW;MAAAA,iBAAQ;MAC1CA,mCAEqB;MAFuCA;QAAA;MAAA,EAAuB;MAAnFA,iBAEqB;MACrBA,yEAGM;MAENA,gCAAoB;MAAAA,uBAAO;MAAAA,iBAAQ;MACnCA,mCAEwB;MAFgCA;QAAA;MAAA,EAAoB;MAA5EA,iBAEwB;MACxBA,2EAGM;MAENA,kCAA2D;MAAAA,uBAAM;MAAAA,iBAAS;;;;;;MAjBdA,eAAuB;MAAvBA,uCAAuB;MAG7EA,eAAgF;MAAhFA,gEAAgF;MAM9BA,eAAoB;MAApBA,oCAAoB;MAGtEA,eAAuE;MAAvEA,gEAAuE;MAKvDA,eAAoC;MAApCA,sCAAoC","names":["i0","TransactionFormComponent","constructor","transactionService","router","accountId","amount","submitTransaction","transactionRequest","console","log","addTransaction","subscribe","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.html","C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.ts"],"sourcesContent":["\r\n<form (ngSubmit)=\"submitTransaction()\" #transactionForm=\"ngForm\">\r\n  <label for=\"accountId\">Account ID:</label>\r\n  <input type=\"text\" id=\"accountId\" name=\"accountId\" required [(ngModel)]=\"accountId\" [ngModelOptions]=\"{ updateOn: 'blur' }\" \r\n         #accountIdInput=\"ngModel\" [ngClass]=\"{ 'is-invalid': accountIdInput.invalid && (accountIdInput.dirty || accountIdInput.touched) }\"\r\n         uuidValidator>\r\n  <div *ngIf=\"accountIdInput.invalid && (accountIdInput.dirty || accountIdInput.touched)\" class=\"invalid-feedback\">\r\n    <div *ngIf=\"accountIdInput.errors?.required\">Account ID is required</div>\r\n    <div *ngIf=\"accountIdInput.errors?.invalidUuid\">Invalid UUID format</div>\r\n  </div>\r\n  \r\n  <label for=\"amount\">Amount:</label>\r\n  <input type=\"number\" id=\"amount\" name=\"amount\" required [(ngModel)]=\"amount\" [ngModelOptions]=\"{ updateOn: 'blur' }\" \r\n         #amountInput=\"ngModel\" [ngClass]=\"{ 'is-invalid': amountInput.invalid && (amountInput.dirty || amountInput.touched) }\"\r\n         integerValidator>\r\n  <div *ngIf=\"amountInput.invalid && (amountInput.dirty || amountInput.touched)\" class=\"invalid-feedback\">\r\n    <div *ngIf=\"amountInput.errors?.required\">Amount is required</div>\r\n    <div *ngIf=\"amountInput.errors?.invalidInteger\">Invalid integer format</div>\r\n  </div>\r\n  \r\n  <button type=\"submit\" [disabled]=\"transactionForm.invalid\">Submit</button>\r\n</form>\r\n\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TransactionService } from './transactionService'; // Import the transaction service\r\n\r\n\r\n@Component({\r\n   selector: 'app-root',\r\n  templateUrl: './transactionForm.component.html',\r\n})\r\nexport class TransactionFormComponent {\r\n  accountId: number;\r\n  amount: number;\r\n\r\n  constructor(private transactionService: TransactionService, private router: Router) {\r\n    this.accountId =111;\r\n    this.amount = 0;\r\n  }\r\n\r\n  submitTransaction(): void {\r\n    // Create transactionRequest object\r\n   const transactionRequest = { accountId: this.accountId, amount: this.amount };\r\n    console.log('Navigation URL:', ['/transactions', transactionRequest.accountId, transactionRequest.amount]);\r\n  \r\n    // Add transaction to SQLite database\r\n    this.transactionService.addTransaction(transactionRequest).subscribe(() => {\r\n    //  Redirect to TransactionListComponent after successful submission\r\n     this.router.navigate(['/transactions', transactionRequest.accountId, transactionRequest.amount]);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}