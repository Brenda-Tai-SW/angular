{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n  }\n  addTransaction(transaction) {\n    return this.http.post(`${this.apiUrl}/transactions`, transaction).pipe(catchError(this.handleError('addTransaction')));\n  }\n  getTransactions() {\n    return this.http.get(`${this.apiUrl}/transactions`);\n  }\n  // Error handling function\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error); // Log the error to console\n      // Let the app keep running by returning an empty result\n      return of(result);\n    };\n  }\n}\nTransactionService.ɵfac = function TransactionService_Factory(t) {\n  return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n};\nTransactionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransactionService,\n  factory: TransactionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,cAAc,CAACC,WAAgB;IAC7B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,eAAe,EAAEF,WAAW,CAAC,CACnEG,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAM,gBAAgB,CAAC,CAAC,CACpD;EACL;EAGAC,eAAe;IACb,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,eAAe,CAAC;EAC5D;EAEA;EACQE,WAAW,CAAIG,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACtB;MACA,OAAOf,EAAE,CAACc,MAAW,CAAC;IACxB,CAAC;EACH;;AAxBWZ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;EAAAgB,YAFjB;AAAM","names":["of","catchError","TransactionService","constructor","http","addTransaction","transaction","post","apiUrl","pipe","handleError","getTransactions","get","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TransactionService {\r\n  private apiUrl = 'http://localhost:8080'; \r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addTransaction(transaction: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/transactions`, transaction)\r\n      .pipe(\r\n        catchError(this.handleError<any>('addTransaction'))\r\n      );\r\n  }\r\n  \r\n  \r\n  getTransactions(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/transactions`);\r\n  }\r\n\r\n  // Error handling function\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // Log the error to console\r\n      // Let the app keep running by returning an empty result\r\n      return of(result as T);\r\n    };\r\n  }\r\n  \r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}