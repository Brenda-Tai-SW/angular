{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class TransactionFormComponent {\n  constructor(http) {\n    this.http = http;\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.accountId = '';\n    this.amount = 0;\n  }\n  submitTransaction() {\n    this.isLoading = true;\n    this.errorMessage = '';\n    const transactionData = {\n      accountId: this.accountId,\n      amount: this.amount\n    };\n    this.http.post('https://example.com/transactions', transactionData).pipe(catchError(error => {\n      this.isLoading = false;\n      this.errorMessage = 'An error occurred while processing the transaction.';\n      return throwError(error);\n    })).subscribe(response => {\n      // Handle response\n      console.log('Transaction successful:', response);\n      // Further UI updates if needed\n      this.isLoading = false;\n    });\n  }\n}\nTransactionFormComponent.ɵfac = function TransactionFormComponent_Factory(t) {\n  return new (t || TransactionFormComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nTransactionFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionFormComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 10,\n  vars: 3,\n  consts: [[3, \"ngSubmit\"], [\"transactionForm\", \"ngForm\"], [\"for\", \"accountId\"], [\"type\", \"text\", \"id\", \"accountId\", \"name\", \"accountId\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"amount\"], [\"type\", \"number\", \"id\", \"amount\", \"name\", \"amount\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 3, \"disabled\"]],\n  template: function TransactionFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0, 1);\n      i0.ɵɵlistener(\"ngSubmit\", function TransactionFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitTransaction();\n      });\n      i0.ɵɵelementStart(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Account ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.accountId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionFormComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.amount = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 6);\n      i0.ɵɵtext(9, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.accountId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.amount);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;;AAKjC,OAAM,MAAOC,wBAAwB;EAMnCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,cAAS,GAAY,KAAK;IAC1B,iBAAY,GAAW,EAAE;IAGvB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,MAAM,GAAG,CAAC;EACjB;EAEAC,iBAAiB;IACf,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB,MAAMC,eAAe,GAAG;MACtBL,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,MAAM,EAAE,IAAI,CAACA;KACd;IAED,IAAI,CAACF,IAAI,CAACO,IAAI,CAAM,kCAAkC,EAAED,eAAe,CAAC,CACrEE,IAAI,CACHZ,UAAU,CAACa,KAAK,IAAG;MACjB,IAAI,CAACL,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,YAAY,GAAG,qDAAqD;MACzE,OAAOR,UAAU,CAACY,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH,CACAC,SAAS,CAACC,QAAQ,IAAG;MACpB;MACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChD;MACA,IAAI,CAACP,SAAS,GAAG,KAAK;IACxB,CAAC,CAAC;EACN;;AAlCWN,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCNrCC,kCAAiE;MAA3DA;QAAA,OAAYC,uBAAmB;MAAA,EAAC;MACpCD,gCAAuB;MAAAA,2BAAW;MAAAA,iBAAQ;MAC1CA,gCAAoF;MAAxBA;QAAA;MAAA,EAAuB;MAAnFA,iBAAoF;MAEpFA,gCAAoB;MAAAA,uBAAO;MAAAA,iBAAQ;MACnCA,gCAA6E;MAArBA;QAAA;MAAA,EAAoB;MAA5EA,iBAA6E;MAE7EA,iCAA2D;MAAAA,sBAAM;MAAAA,iBAAS;;;;MALdA,eAAuB;MAAvBA,uCAAuB;MAG3BA,eAAoB;MAApBA,oCAAoB;MAEtDA,eAAoC;MAApCA,sCAAoC","names":["catchError","throwError","TransactionFormComponent","constructor","http","accountId","amount","submitTransaction","isLoading","errorMessage","transactionData","post","pipe","error","subscribe","response","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.ts","C:\\brenda\\Scania\\angular\\frontend-boilerplate-angular\\app-frontend\\src\\app\\transactionForm.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './transactionForm.component.html',\r\n})\r\nexport class TransactionFormComponent {\r\n  accountId: string;\r\n  amount: number;\r\n  isLoading: boolean = false;\r\n  errorMessage: string = '';\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.accountId = '';\r\n    this.amount = 0;\r\n  }\r\n\r\n  submitTransaction(): void {\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n\r\n    const transactionData = {\r\n      accountId: this.accountId,\r\n      amount: this.amount\r\n    };\r\n\r\n    this.http.post<any>('https://example.com/transactions', transactionData)\r\n      .pipe(\r\n        catchError(error => {\r\n          this.isLoading = false;\r\n          this.errorMessage = 'An error occurred while processing the transaction.';\r\n          return throwError(error);\r\n        })\r\n      )\r\n      .subscribe(response => {\r\n        // Handle response\r\n        console.log('Transaction successful:', response);\r\n        // Further UI updates if needed\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n}\r\n","\r\n\r\n<form (ngSubmit)=\"submitTransaction()\" #transactionForm=\"ngForm\">\r\n  <label for=\"accountId\">Account ID:</label>\r\n  <input type=\"text\" id=\"accountId\" name=\"accountId\" required [(ngModel)]=\"accountId\">\r\n  \r\n  <label for=\"amount\">Amount:</label>\r\n  <input type=\"number\" id=\"amount\" name=\"amount\" required [(ngModel)]=\"amount\">\r\n  \r\n  <button type=\"submit\" [disabled]=\"transactionForm.invalid\">Submit</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}